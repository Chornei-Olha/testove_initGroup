"use strict";
globalThis["webpackHotUpdatetestove_input"]("stories-InputGroup-stories",{

/***/ "./src/stories/ InputGroup.stories.tsx":
/*!*********************************************!*\
  !*** ./src/stories/ InputGroup.stories.tsx ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Default: () => (/* binding */ Default),
/* harmony export */   Disabled: () => (/* binding */ Disabled),
/* harmony export */   Error: () => (/* binding */ Error),
/* harmony export */   Small: () => (/* binding */ Small),
/* harmony export */   SmallError: () => (/* binding */ SmallError),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _components_molecules_InputGroup_InputGroup__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/molecules/InputGroup/InputGroup */ "./src/components/molecules/InputGroup/InputGroup.tsx");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");
/* provided dependency */ var __react_refresh_error_overlay__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js");
__webpack_require__.$Refresh$.runtime = __webpack_require__(/*! ./node_modules/react-refresh/runtime.js */ "./node_modules/react-refresh/runtime.js");


const meta = {
  title: "Components/InputGroup",
  component: _components_molecules_InputGroup_InputGroup__WEBPACK_IMPORTED_MODULE_0__["default"],
  tags: ["autodocs"]
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (meta);
// Пример истории по умолчанию
const Default = {
  args: {
    id: "input-default",
    label: "Email address",
    placeholder: "e.g. johndoe@gmail.com",
    value: "",
    onChange: () => {},
    size: "medium",
    isRequired: true,
    quiet: true,
    disabled: false,
    hasError: false,
    hint: "required",
    infoText: "Please enter your work email address",
    helpText: "Invalid input. Try again",
    description: "Passwords must be at least 8 characters"
  }
};

// Пример истории с ошибкой
const Error = {
  args: {
    id: "input-error",
    label: "Email address",
    placeholder: "e.g. johndoe@gmail.com",
    value: "",
    onChange: () => {},
    size: "medium",
    isRequired: true,
    quiet: false,
    disabled: false,
    hasError: true,
    hint: "required",
    infoText: "Please enter your work email address",
    helpText: "Invalid input. Try again",
    description: "Passwords must be at least 8 characters"
  }
};

// Пример истории с отключенным вводом
const Disabled = {
  args: {
    id: "input-disabled",
    label: "Email address",
    placeholder: "e.g. johndoe@gmail.com",
    value: "",
    onChange: () => {},
    size: "medium",
    isRequired: true,
    quiet: false,
    disabled: true,
    hasError: false,
    hint: "required",
    infoText: "Please enter your work email address",
    helpText: "Invalid input. Try again",
    description: "Passwords must be at least 8 characters"
  }
};

// Пример истории для размера small
const Small = {
  args: {
    id: "input-small",
    label: "Email address",
    placeholder: "e.g. johndoe@gmail.com",
    value: "",
    onChange: () => {},
    size: "small",
    isRequired: true,
    quiet: false,
    disabled: false,
    hasError: false,
    hint: "required",
    infoText: "Please enter your work email address",
    helpText: "Invalid input. Try again",
    description: "Passwords must be at least 8 characters"
  }
};

// Пример истории для состояния ошибки с размером small
const SmallError = {
  args: {
    id: "input-small-error",
    label: "Email address",
    placeholder: "e.g. johndoe@gmail.com",
    value: "",
    onChange: () => {},
    size: "small",
    isRequired: true,
    quiet: false,
    disabled: false,
    hasError: true,
    hint: "required",
    infoText: "Please enter your work email address",
    helpText: "Invalid input. Try again",
    description: "Passwords must be at least 8 characters"
  }
};
;
const __namedExportsOrder = ["Default", "Error", "Disabled", "Small", "SmallError"];
Default.parameters = {
  ...Default.parameters,
  docs: {
    ...Default.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    id: \"input-default\",\n    label: \"Email address\",\n    placeholder: \"e.g. johndoe@gmail.com\",\n    value: \"\",\n    onChange: () => {},\n    size: \"medium\",\n    isRequired: true,\n    quiet: true,\n    disabled: false,\n    hasError: false,\n    hint: \"required\",\n    infoText: \"Please enter your work email address\",\n    helpText: \"Invalid input. Try again\",\n    description: \"Passwords must be at least 8 characters\"\n  }\n}",
      ...Default.parameters?.docs?.source
    }
  }
};
Error.parameters = {
  ...Error.parameters,
  docs: {
    ...Error.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    id: \"input-error\",\n    label: \"Email address\",\n    placeholder: \"e.g. johndoe@gmail.com\",\n    value: \"\",\n    onChange: () => {},\n    size: \"medium\",\n    isRequired: true,\n    quiet: false,\n    disabled: false,\n    hasError: true,\n    hint: \"required\",\n    infoText: \"Please enter your work email address\",\n    helpText: \"Invalid input. Try again\",\n    description: \"Passwords must be at least 8 characters\"\n  }\n}",
      ...Error.parameters?.docs?.source
    }
  }
};
Disabled.parameters = {
  ...Disabled.parameters,
  docs: {
    ...Disabled.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    id: \"input-disabled\",\n    label: \"Email address\",\n    placeholder: \"e.g. johndoe@gmail.com\",\n    value: \"\",\n    onChange: () => {},\n    size: \"medium\",\n    isRequired: true,\n    quiet: false,\n    disabled: true,\n    hasError: false,\n    hint: \"required\",\n    infoText: \"Please enter your work email address\",\n    helpText: \"Invalid input. Try again\",\n    description: \"Passwords must be at least 8 characters\"\n  }\n}",
      ...Disabled.parameters?.docs?.source
    }
  }
};
Small.parameters = {
  ...Small.parameters,
  docs: {
    ...Small.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    id: \"input-small\",\n    label: \"Email address\",\n    placeholder: \"e.g. johndoe@gmail.com\",\n    value: \"\",\n    onChange: () => {},\n    size: \"small\",\n    isRequired: true,\n    quiet: false,\n    disabled: false,\n    hasError: false,\n    hint: \"required\",\n    infoText: \"Please enter your work email address\",\n    helpText: \"Invalid input. Try again\",\n    description: \"Passwords must be at least 8 characters\"\n  }\n}",
      ...Small.parameters?.docs?.source
    }
  }
};
SmallError.parameters = {
  ...SmallError.parameters,
  docs: {
    ...SmallError.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    id: \"input-small-error\",\n    label: \"Email address\",\n    placeholder: \"e.g. johndoe@gmail.com\",\n    value: \"\",\n    onChange: () => {},\n    size: \"small\",\n    isRequired: true,\n    quiet: false,\n    disabled: false,\n    hasError: true,\n    hint: \"required\",\n    infoText: \"Please enter your work email address\",\n    helpText: \"Invalid input. Try again\",\n    description: \"Passwords must be at least 8 characters\"\n  }\n}",
      ...SmallError.parameters?.docs?.source
    }
  }
};

const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (typeof __react_refresh_error_overlay__ !== 'undefined') {
			errorOverlay = __react_refresh_error_overlay__;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ })

});
//# sourceMappingURL=stories-InputGroup-stories.753ea73e59cdc6ff652b.hot-update.js.map